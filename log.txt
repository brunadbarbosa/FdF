/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   0-main.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brmaria- <brmaria-@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/10 14:29:54 by brmaria-          #+#    #+#             */
/*   Updated: 2025/08/06 11:58:39 by brmaria-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"
#include "libft.h"
#include "get_next_line.h"

void	init_view(t_view *view)
{
	view->mlx = mlx_init();
	view->win = mlx_new_window(view->mlx, WIN_WIDTH, WIN_HEIGHT, "FDF 2D Viewer");
	view->zoom = 20;
	view->angle_x = 0;
	view->angle_y = 0;
	view->angle_z = 0;
	view->z_scale = 3;
	view->x_offset = WIN_WIDTH / 2;
	view->y_offset = WIN_HEIGHT / 4;
	view->img = mlx_new_image(view->mlx, WIN_WIDTH, WIN_HEIGHT);
	view->addr = mlx_get_data_addr(view->img, &view->bpp, &view->line_length, &view->endian);
}

void free_split(char **tokens)
{
	int i = 0;
	while (tokens[i])
	{
		free(tokens[i]);
		i++;
	}
	free(tokens);
}

void	free_map(t_view *view)
{
	int i;

	if (!view || !view->map)
		return;

	for (i = 0; i < view->height; i++)
		free(view->map[i]);
	free(view->map);
	view->map = NULL;
}


int	main(int argc, char **argv)
{
	t_view	*view;

	view = malloc(sizeof(t_view));
	if (argc != 2)
	{
		printf("Usage: ./fdf <map_file>\n");
		return (1);
	}

	parse(argv[1], view);
	init_view(view);
	draw_map(view);

	mlx_key_hook(view->win, handle_keypress, view);
	mlx_hook(view->win, 17, 0, handle_close, view);
	mlx_loop(view->mlx);

	free_map(view);
	free(view);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   1-parsing.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brmaria- <brmaria-@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/28 10:58:30 by brmaria-          #+#    #+#             */
/*   Updated: 2025/07/30 14:09:34 by brmaria-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"
#include "libft.h"
#include "get_next_line.h"

int check_width(char **split, int expected)
{
	int i = 0;
	while (split[i] && split[i][0] != '\n')
		i++;
	return (i == expected);
}

static int	get_width(char *file)
{
	int	fd;
	char	c;
	int	width;

	width = 0;
	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (-1);
	while (read(fd, &c, 1) > 0)
	{
		if ((c >= '0' && c <= '9') || c == '-')
		{
			width++;
			while (c != ' ' && c != '\n')
				read(fd, &c, 1);
		}
		if (c == '\n')
			break ;
	}
	close(fd);
	return (width);
}

static int	get_height(char *file)
{
	char	c;
	int	height;
	int	in_line;
	int	fd;
	
	height = 0;
	in_line = 0;
	fd = open(file, O_RDONLY);
	if (fd < 0)
	{
		perror("Error opening file");
		exit(EXIT_FAILURE);
	}
	while (read(fd, &c, 1) > 0)
	{
		if (c == '\n')
		{
			height++;
			in_line = 0;
		}
		else
			in_line = 1;
	}
	if(in_line)
		height++;
	close(fd);
	return (height);
}

static void	add_measures(t_view *view, char **split, int i)
{
	int		j;
	char	**z_color;

	j = 0;
	while (j < view->width)
	{
		z_color = ft_split(split[j], ',');
		view->map[i][j].x = j;
		view->map[i][j].y = i;
		view->map[i][j].z = ft_atoi(z_color[0]);
		// if (z_color[1])
		// 	view->map[i][j].color = atoi_hex(z_color[1]);
		// else
		// 	view->map[i][j].color = 0;
		free_split(z_color);
		j++;
	}
}

void	parse(char *file, t_view *view)
{
	int		fd;
	int		i = 0;
	char	*line;
	char	**split;

	view->width = get_width(file);
	view->height = get_height(file);
	view->map = malloc(sizeof(t_point *) * view->height);
	if (!view->map)
		exit(EXIT_FAILURE);

	fd = open(file, O_RDONLY);
	if (fd < 0)
		exit(EXIT_FAILURE);
	line = get_next_line(fd);
	while (line != NULL)
	{
		view->map[i] = malloc(sizeof(t_point) * view->width);
		if (!view->map[i])
			exit(EXIT_FAILURE);
		split = ft_split(line, ' ');
		// if (!check_width(split, view->width))
		// {
		// 	write(2, "Map format error: line width mismatch\n", 38);
		// 	free(line);
		// 	free_split(split);
		// 	exit(EXIT_FAILURE);
		// }
		add_measures(view, split, i);
		free_split(split);
		free(line);
		line = get_next_line(fd);
		i++;
	}
	close(fd);
}

// void	parse(char *file, t_view *view)
// {
// 	int		fd;
// 	int		i;
// 	char	*line;
// 	char	**split;

// 	view->width = get_width(file);
// 	view->height = get_height(file);
// 	view->map = malloc(sizeof(t_point *) * view->height);
// 	if (!view->map)
// 		exit(1);
// 	i = 0;
// 	fd = open(file, O_RDONLY);
// 	if (fd < 0)
// 		exit(1);
// 	line = get_next_line(fd);
// 	while (line != NULL)
// 	{
// 		view->map[i] = malloc(sizeof(t_point) * view->width);
// 		split = ft_split(line, ' ');
// 		add_measures(view, split, i);
// 		line = get_next_line(fd);
// 		i++;
// 	}
// 	if (!check_width(split, view->width))
// 	{
// 		write(2, "Map format error: line width mismatch\n", 38);
// 		exit(EXIT_FAILURE);
// 	}
// 	close(fd);
// }
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   1-screen.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brmaria- <brmaria-@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/21 13:18:00 by brmaria-          #+#    #+#             */
/*   Updated: 2025/08/06 13:53:55 by brmaria-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"

int	direction(int a, int b)
{
	if (a < b)
		return (1);
	else
		return (-1);
}

void	init_bresenham(t_bresenham *b, t_point a, t_point b_point)
{
	b->dx = fabs(b_point.x - a.x);
	b->dy = fabs(b_point.y - a.y);
	b->sx = direction(a.x, b_point.x);
	b->sy = direction(a.y, b_point.y);
	b->err = b->dx - b->dy;
}

void isometric_projection(t_point *p)
{
	int prev_x = p->x;
	int prev_y = p->y;

	p->x = (prev_x - prev_y) * cos(0.523599);
	p->y = (prev_x + prev_y) * sin(0.523599) - p->z;
}

int	handle_keypress(int keycode, t_view *vars)
{
	if (keycode == 65307)
	{
		mlx_destroy_window(vars->mlx, vars->win);
		exit(0);
	}
	else if (keycode == 65361) // left
		rotate_y(vars, -0.1);
	else if (keycode == 65363) // right
		rotate_y(vars, 0.1);
	else if (keycode == 65362) // up
		rotate_x(vars, -0.1);
	else if (keycode == 65364) // down
		rotate_x(vars, 0.1);

	// Atualiza a tela (apaga e redesenha)
	mlx_clear_window(vars->mlx, vars->win);
	draw_map(vars);
	return (0);
}

int	handle_close(t_view *vars)
{
	mlx_destroy_window(vars->mlx, vars->win);
	exit(0);
	return (0);
}

void	draw_pixel(t_view *img, int x, int y, int color)
{
	char	*dst;

	if (x < 0 || y < 0 || x >= WIN_WIDTH || y >= WIN_HEIGHT)
		return;
	dst = img->addr + (y * img->line_length + x * (img->bpp / 8));
	*(unsigned int*)dst = color;
}

void	draw_line(t_view *img, t_point a, t_point b, int color)
{
	float	step;
	float	x;
	float	y;
	float	dx = b.x - a.x;
	float	dy = b.y - a.y;

	step = fmax(fabs(dx), fabs(dy));
	dx /= step;
	dy /= step;
	x = a.x;
	y = a.y;
	while ((int)(x - b.x) || (int)(y - b.y))
	{
		draw_pixel(img, x, y, color);
		x += dx;
		y += dy;
	}
}

void	draw_map(t_view *view)
{
	int		x;
	int		y;
	t_point	a;
	t_point	b;

	y = 0;
	while (y < view->height)
	{
		x = 0;
		while (x < view->width)
		{
			a.x = x * view->zoom;
			a.y = y * view->zoom;
			a.z = view->map[y][x].z * view->z_scale;
			isometric_projection(&a);
			a.x += view->x_offset;
			a.y += view->y_offset;
			if (x < view->width - 1)
			{
				b.x = (x + 1) * view->zoom;
				b.y = y * view->zoom;
				b.z = view->map[y][x + 1].z * view->z_scale;
				isometric_projection(&b);
				b.x += view->x_offset;
				b.y += view->y_offset;
				draw_line(view, a, b, 0xFFFFFF); // horizontal
			}
			if (y < view->height - 1)
			{
				b.x = x * view->zoom;
				b.y = (y + 1) * view->zoom;
				b.z = view->map[y + 1][x].z * view->z_scale;
				isometric_projection(&b);
				b.x += view->x_offset;
				b.y += view->y_offset;
				draw_line(view, a, b, 0xFFFFFF); // vertical
			}
			x++;
		}
		y++;
	}
	mlx_put_image_to_window(view->mlx, view->win, view->img, 0, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   5-rotate.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brmaria- <brmaria-@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/02 17:09:37 by brmaria-          #+#    #+#             */
/*   Updated: 2025/08/06 13:49:35 by brmaria-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"

void	rotate_x(double *y, double *z, double angle_x)
{
	double	prev_y;
	double	prev_z;

	prev_y = *y;
	prev_z = *z;
	*y = prev_y * cos(angle_x) - prev_z * sin(angle_x);
	*z = prev_y * sin(angle_x) + prev_z * cos(angle_x);
}

void	rotate_y(double *x, double *z, double angle_y)
{
	double	prev_x;
	double	prev_z;

	prev_x = *x;
	prev_z = *z;
	*x = prev_x * cos(angle_y) + prev_z * sin(angle_y);
	*z = -prev_x * sin(angle_y) + prev_z * cos(angle_y);
}

void	rotate_z(double *x, double *y, double angle_z)
{
	double	prev_x;
	double	prev_y;

	prev_x = *x;
	prev_y = *y;
	*x = prev_x * cos(angle_z) - prev_y * sin(angle_z);
	*y = prev_x * sin(angle_z) + prev_y * cos(angle_z);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   8-error.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brmaria- <brmaria-@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/28 12:09:16 by brmaria-          #+#    #+#             */
/*   Updated: 2025/07/30 12:44:32 by brmaria-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

